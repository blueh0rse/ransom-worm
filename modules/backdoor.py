###########################################################################################################################
####################################################     LIBRARIES     ####################################################
###########################################################################################################################



###########################################################################################################################
#################################################     INITIALIZATIONS     #################################################
###########################################################################################################################

# Opens a backdoor with the attacker's machine
def start_backdoor(attacker_ip = None):
    if type(attacker_ip) == type(None): return

    # PLACE CODE HERE...

    return

# Closes the backdoor with the attacker's machine
def stop_backdoor(attacker_ip = None):
    if type(attacker_ip) == type(None): return

    # PLACE CODE HERE...

    return

###########################################################################################################################
#####################################################     PROGRAM     #####################################################
###########################################################################################################################

def run():
    success = False
    print("[+] Backdoor module activated!")
    # code ...
    success = True
    return success
